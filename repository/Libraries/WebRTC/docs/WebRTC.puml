@startuml WebRTC流程
entity 推流端
entity 信令服务
entity ICE服务
entity 收流端

activate 推流端

推流端 -> 信令服务: 1. 推流端与信令服务建立WebSocket连接

activate 信令服务

收流端 -> 信令服务: 2. 收流端与信令服务建立WebSocket连接

activate 收流端

信令服务 -> 推流端: 3. 信令服务通知推流端, 收流端已上线

推流端 -> 推流端: 4. 创建RTCPeerconnection对象
note left
const CallerPeerConnection = new RTCPeerConnection();
end note

推流端 -> 推流端: 5. 推流端获取本地摄像头和麦克风源
note left
const LocalStreams = await navigator
                        .mediaDevices
                        .getUserMedia({ video:true, audio:true });
end note

推流端  -> 推流端: 6. 推流端将获取到的本地摄像头及麦克风源加入到RTCPeerconnection对象中
note left
CallerPeerConnection.addStream(LocalStreams);
end note

推流端 -> 推流端: 7. 推流端创建Offer
note left
const OfferOptions = {
    offerToReceiveAudio: true,
    offerToReceiveVideo: true,
    voiceActivityDetection: true
};
const CallerOfferSDP = await CallerPeerConnection
                        .createOffer(OfferOptions);
end note

推流端 -> 推流端: 8. 推流端将Offer设置到本地描述信息中
note left
CallerPeerConnection.setLocalDescription(CallerOfferSDP);
end note

推流端 -> 信令服务: 9. 推流端将Offer发送到信令服务

信令服务 -> 收流端: 10. 信令服务将推流端发送来的Offer推送给收流端

收流端 -> 收流端: 11. 收流端创建RTCPeerconnection对象
note right
const ReceiverRTCPeerConnection = new RTCPeerConnection();
end note

收流端 -> 收流端: 12. 收流端将信令推送来的Offer设置到远端描述信息中
note right
ReceiverRTCPeerConnection.setRemoteDescription(Offer);
end note

收流端 -> 收流端: 13. 收流端创建Anwser
note right
const AnwserOptions = {
    offerToReceiveAudio: true,
    offerToReceiveVideo: true,
    voiceActivityDetection: true
};
const Anwser = ReceiverRTCPeerConnection.createAnwser(AnwserOptions);
end note

收流端 -> 收流端: 14. 收流端将创建的Anwser设置到本地描述信息中
note right
ReceiverRTCPeerConnection.setLocalDescription(Anwser);
end note

收流端 -> 信令服务: 15. 收流端将创建的Anwser发送到信令服务

信令服务 -> 推流端: 16. 信令服务将收流端发送来的Anwser推送给推流端

推流端 -> 推流端: 17. 推流端将信令服务推送来的Anwser设置到远端描述信息中
note left
CallerPeerConnection.setRemoteDescription(Anwser);
end note

推流端 -> ICE服务: 18. 推流端请求ICE服务获取自己的NAT信息

activate ICE服务
ICE服务 -> 推流端: 19. ICE服务返回推流端的NAT信息Cadicate

推流端 -> 推流端: 20. 推流端将获取到的NAT信息设置到RTCPeerconnection对象中
note left
CallerPeerConnection.addIceCandidate(Cadicate);
end note

推流端 -> 信令服务: 21. 推流端将自己的Cadicate发送到信令服务

信令服务 -> 收流端: 22. 信令服务将推流端发送来的Cadicate推送给收流端

收流端 -> 收流端: 23. 收流端将收到的Cadicate设置到RTCPeerconnection对象中
note right
ReceiverRTCPeerConnection.addIceCandidate(Cadicate);
end note

收流端 -> 收流端: 24. 收流端请求ICE服务获取自己的NAT信息

ICE服务 -> 收流端: 25. ICE服务返回收流端的NAT信息Cadicate

收流端 -> 收流端: 26. 收流端将自己的Cadicate设置到RTCPeerconnection对象中

收流端 -> 信令服务: 27. 收流端将自己的Cadicate发送到信令服务

信令服务 -> 推流端: 28. 信令服务将收流端发送来的Cadicate推送给推流端

推流端 -> 推流端: 29. 推流端将信令推送来的Cadicate设置到RTCPeerconnection对象中
note left
CallerPeerConnection.addIceCandidate(Cadicate);
end note

推流端 <-> 收流端: 30. 推流端和收流端使用各自在RTCPeerconnection对象中持有的Cadicate信息建立端对端连接

推流端 -> 收流端: 31. 推拉音视频流

@enduml